name: Build a package

run-name: Build ${{ inputs.package-id }} with GHC ${{ inputs.ghc-version }}

on:
  workflow_call:
    inputs:
      package-id:
        description: Package to build
        required: true
        type: string
      ghc-version:
        description: GHC version to use
        required: true
        type: string
      index-state:
        description: Index state to use
        required: false
        type: string
        default: HEAD

jobs:
  build:
    runs-on:
      - ubuntu-22.04

    env:
      PKG_CONFIG_PATH: "${{ github.workspace }}/extras/libsodium/lib/pkgconfig:${{ github.workspace }}/extras/secp256k1/lib/pkgconfig"

    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/libsodium
        with:
          path: extras/libsodium

      - uses: ./.github/actions/secp256k1
        with:
          path: extras/secp256k1

      ## GHC toolchain

      - name: Set up ghc cache
        id: ghc-cache
        uses: actions/cache@v3
        with:
          path: ghc
          key: ghc-${{ runner.os }}-${{ inputs.ghc-version }}

      - name: Install GHC ${{ inputs.ghc-version }}
        if: steps.ghc-cache.outputs.cache-hit != 'true'
        run: ghcup install ghc ${{ inputs.ghc-version }} --isolate $PWD/ghc

      - name: Add ghc bin to path
        run: echo "$PWD/ghc/bin" >> $GITHUB_PATH

      - name: Set up cabal cache
        uses: actions/cache@v3
        with:
          path: cabal
          key: cabal-${{ runner.os }}-${{ inputs.ghc-version }}-${{ github.run_id }}
          restore-keys: cabal-${{ runner.os }}-${{ inputs.ghc-version }}

      # Note: cache-hit is set to true only when cache hit occurs for the exact key match.
      # For a partial key match like the one above, it will be set to false.
      - name: Install cabal if necessary
        run: |
          [[ -x $PWD/cabal/bin/cabal ]] || ghcup install cabal latest --isolate $PWD/cabal/bin

      - name: Add cabal bin to path
        run: echo "$PWD/cabal/bin" >> $GITHUB_PATH

      - name: Set cabal dir
        run: echo "CABAL_DIR=$PWD/cabal" >> $GITHUB_ENV

      # # Why don't we have a binary distribution!?
      # - name: Build and install cabal-plan
      #   id: cabal-plan
      #   run: |
      #     cabal update
      #     cabal install cabal-plan --install-method=copy --overwrite-policy=always --constraint='cabal-plan +exe'
      #   # A failure here is not essential
      #   continue-on-error: true

      ## Build package

      - name: Download built repository
        uses: actions/download-artifact@v3
        with:
          name: built-repo
          path: built-repo

      - name: Set up project for ${{ inputs.package-id }}
        run: |
          # We need at least an empty cabal.project to avoid the implicit one
          cat >cabal.project <<EOF
          repository cardano-haskell-packages
            url: file:${{ github.workspace }}/built-repo
            secure: True
            root-keys:
              3e0cce471cf09815f930210f7827266fd09045445d65923e6d0238a6cd15126f
              443abb7fb497a134c343faf52f0b659bd7999bc06b7f63fa76dc99d631f9bea1
              a86a1f6ce86c449c46666bda44268677abf29b5b2d2eb5ec7af903ec2f117a82
              bcec67e8e99cabfa7764d75ad9b158d72bfacf70ca1d0ec8bc6b4406d1bf8413
              c00aae8461a256275598500ea0e187588c35a5d5d7454fb57eac18d9edb86a56
              d4a35cd3121aa00d18544bb0ac01c3e1691d618f462c46129271bccf39f7e8ee

          extra-packages: ${{ inputs.package-id }}
          index-state: ${{ inputs.index-state }}
          EOF
          # Parse package-id
          PACKAGE_NAME_REGEX='(.*)(-([0-9]+)(.[0-9]+)*)?$'
          [[ ${{ inputs.package-id }} =~ $PACKAGE_NAME_REGEX ]]
          echo "PACKAGE_NAME=${BASH_REMATCH[1]}" >> $GITHUB_ENV

      - name: Run cabal update for project
        run: |
          mkdir -p $CABAL_DIR/packages/cardano-haskell-packages # workaround for cabal bug
          cabal update

      - name: Formulate install plan for ${{ inputs.package-id }}
        run: cabal build --dry-run ${{ env.PACKAGE_NAME }}

      # - name: Display cabal-plan
      #   # This might not work
      #   if: ${{ steps.cabal-plan.conclusion == 'success' }}
      #   run: cabal-plan

      - name: Build ${{ inputs.package-id }} dependencies
        run: cabal build ${{ env.PACKAGE_NAME }} --only-dependencies

      - name: Build ${{ inputs.package-id }}
        run: cabal build ${{ env.PACKAGE_NAME }}

      # Workaround for cabal not display build errors (to be submitted)
      - name: Show build failure
        if: ${{ failure() && steps.cabal-build.conclusion == 'failure' }}
        run: |
          ID=$(jq -r '."install-plan"[].id | select(startswith(env.PACKAGE_NAME))' < dist-newstyle/cache/plan.json)
          cat $HOME/.cabal/logs/ghc-${{ inputs.ghc-version }}/$ID.log
